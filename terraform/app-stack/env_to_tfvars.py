#!/usr/bin/env python3
"""
Script to automatically generate terraform.tfvars from .env.local file
This ensures all credentials and configuration are managed in one place
DynamoDB table names are managed by the data-stack with auto-generated unique names
"""
import os
from pathlib import Path


def parse_env_file(env_file_path):
    """Parse .env file and return key-value pairs"""
    env_vars = {}

    if not os.path.exists(env_file_path):
        print(f"Error: {env_file_path} not found")
        return env_vars

    with open(env_file_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            # Skip empty lines and comments
            if not line or line.startswith("#"):
                continue

            # Split on first = only
            if "=" in line:
                key, value = line.split("=", 1)
                value = value.strip()
                # Remove surrounding quotes if present
                if (value.startswith('"') and value.endswith('"')) or (
                    value.startswith("'") and value.endswith("'")
                ):
                    value = value[1:-1]
                env_vars[key.strip()] = value

    return env_vars


def generate_tfvars(env_vars, output_path):
    """Generate terraform.tfvars file from environment variables"""

    # Mapping from .env.local variables to Terraform variables
    var_mapping = {
        "REDDIT_CLIENT_ID": "reddit_client_id",
        "REDDIT_CLIENT_SECRET": "reddit_client_secret",
        "REDDIT_USER_AGENT": "reddit_user_agent",
        "COGNITO_REGION": "region",  # Map to Terraform region variable
        "GOOGLE_OAUTH_CLIENT_ID": "google_oauth_client_id",
        "GOOGLE_OAUTH_CLIENT_SECRET": "google_oauth_client_secret",
        "GITHUB_CONNECTION_ARN": "github_connection_arn",
    }

    tfvars_content = []
    tfvars_content.append("# Auto-generated from .env.local - DO NOT EDIT MANUALLY")
    tfvars_content.append("# Run 'python env_to_tfvars.py' to regenerate")
    tfvars_content.append("# DynamoDB table names are managed by the data-stack")
    tfvars_content.append("")

    # Add mapped variables
    for env_key, tf_var in var_mapping.items():
        if env_key in env_vars:
            value = env_vars[env_key]
            # Quote string values
            tfvars_content.append(f'{tf_var} = "{value}"')

    tfvars_content.append("")
    tfvars_content.append("# Project Configuration")
    tfvars_content.append('project_name = "lenslate"')
    tfvars_content.append('environment = "dev"')
    tfvars_content.append("")
    tfvars_content.append(
        "# S3 Configuration - Bucket names are auto-generated by Terraform with unique suffixes"
    )
    tfvars_content.append("# Each developer gets isolated S3 buckets automatically")
    tfvars_content.append("# No hardcoded S3 bucket names - all generated dynamically")
    tfvars_content.append("")

    tfvars_content.append("# Frontend Configuration")
    tfvars_content.append('frontend_path = "../../frontend"')
    tfvars_content.append(
        'allowed_origins = ["http://localhost:8080", "http://127.0.0.1:8080", "http://localhost:5500", "http://127.0.0.1:5500"]'
    )

    # Write to file
    with open(output_path, "w") as f:
        f.write("\n".join(tfvars_content))

    print(f"Generated {output_path} from .env.local")
    print("Variables mapped:")
    for env_key, tf_var in var_mapping.items():
        if env_key in env_vars:
            print(f"  {env_key} -> {tf_var}")

    print("\nNote: DynamoDB table names are managed by the data-stack")
    print("App-stack references them via terraform remote state outputs")


def main():
    # Get paths
    script_dir = Path(__file__).parent
    env_file = script_dir.parent.parent / ".env.local"
    tfvars_file = script_dir / "terraform.tfvars"

    # Parse .env.local
    env_vars = parse_env_file(env_file)

    if not env_vars:
        print("No environment variables found or .env.local file missing")
        # Don't exit - we can still generate basic tfvars for AWS-only deployment
        env_vars = {}

    # Generate terraform.tfvars
    generate_tfvars(env_vars, tfvars_file)


if __name__ == "__main__":
    main()
