#!/usr/bin/env python3
"""Storage Configuration Script

This script helps you configure and switch between AWS S3 and Google Cloud Storage
for your image translation pipeline.

Usage:
    python configure_storage.py --backend aws
    python configure_storage.py --backend gcs --bucket-name your-gcs-bucket
    python configure_storage.py --status
"""

import argparse
import os
import sys
from pathlib import Path
from typing import Dict, Optional


def create_env_file(
    backend: str,
    gcs_bucket: Optional[str] = None,
    gcs_credentials: Optional[str] = None,
) -> None:
    """Create or update .env.local file with storage configuration."""
    env_file = Path(__file__).parent / ".env.local"

    # Read existing env file if it exists
    existing_env: Dict[str, str] = {}
    if env_file.exists():
        with open(env_file, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    existing_env[key] = value

    # Update storage configuration
    if backend.lower() == "aws":
        existing_env["STORAGE_BACKEND"] = "aws"
        # Remove GCS-specific variables
        existing_env.pop("GCS_BUCKET_NAME", None)
        existing_env.pop("GOOGLE_APPLICATION_CREDENTIALS", None)

    elif backend.lower() == "gcs":
        existing_env["STORAGE_BACKEND"] = "gcs"
        # Use your specific GCS bucket if not provided
        existing_env["GCS_BUCKET_NAME"] = gcs_bucket or "gcloud-image-bucket"
        if gcs_credentials:
            existing_env["GOOGLE_APPLICATION_CREDENTIALS"] = gcs_credentials

    # Write updated env file
    with open(env_file, "w") as f:
        f.write("# Storage Configuration\n")
        f.write("# Generated by configure_storage.py\n\n")

        for key, value in existing_env.items():
            f.write(f"{key}={value}\n")

    print(f"✓ Updated {env_file}")


def show_status() -> None:
    """Show current storage configuration status."""
    from src.storage_adapter import check_storage_connectivity, get_storage_info

    info = get_storage_info()
    print("Current Storage Configuration:")
    print(f"  Backend: {info['backend']}")
    print(f"  Bucket: {info['bucket']}")
    print(f"  Region: {info['region']}")
    print()

    print("Connectivity Test:")
    if check_storage_connectivity():
        print("  ✓ Storage backend is accessible")
    else:
        print("  ✗ Storage backend is not accessible")
        print("    Check your credentials and configuration")


def setup_aws() -> None:
    """Provide instructions for AWS setup."""
    print("AWS S3 Setup:")
    print("1. Ensure your AWS credentials are configured:")
    print("   - AWS CLI: aws configure")
    print("   - Environment variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY")
    print("   - IAM role (if running on EC2/Lambda)")
    print()
    print("2. Your S3 bucket is configured in config.py:")
    print('   S3_IMAGE_BUCKET = "ajbarea-aws-translate"')
    print()
    print("3. Run: python configure_storage.py --backend aws")


def setup_gcs() -> None:
    """Provide instructions for Google Cloud Storage setup."""
    print("Google Cloud Storage Setup:")
    print()
    print("1. Install Google Cloud SDK: https://cloud.google.com/sdk/docs/install")
    print()
    print("2. Authenticate with Google Cloud:")
    print("   gcloud auth login")
    print("   gcloud auth application-default login")
    print()
    print("3. Create a service account (recommended for production):")
    print("   gcloud iam service-accounts create image-translate-storage")
    print("   gcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\")
    print(
        "     --member='serviceAccount:image-translate-storage@YOUR_PROJECT_ID.iam.gserviceaccount.com' \\"
    )
    print("     --role='roles/storage.admin'")
    print()
    print("4. Download service account key:")
    print("   gcloud iam service-accounts keys create key.json \\")
    print(
        "     --iam-account=image-translate-storage@YOUR_PROJECT_ID.iam.gserviceaccount.com"
    )
    print()
    print("5. Create a Google Cloud Storage bucket:")
    print("   gsutil mb gs://your-unique-bucket-name")
    print()
    print("6. Install Python dependencies:")
    print("   pip install '.[gcs]' ")
    print()
    print("7. Configure the adapter:")
    print("   python configure_storage.py --backend gcs --bucket-name your-bucket-name")


def install_gcs_dependencies() -> bool:
    """Install Google Cloud Storage dependencies."""
    try:
        import subprocess

        print("Installing Google Cloud Storage dependencies...")
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "google-cloud-storage"],
            capture_output=True,
            text=True,
            check=False,
        )
        if result.returncode == 0:
            print("✓ Successfully installed google-cloud-storage")
            return True
        else:
            print(f"✗ Failed to install dependencies: {result.stderr}")
            return False
    except Exception as e:
        print(f"✗ Error installing dependencies: {e}")
        return False


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Configure storage backend for AWS Image Translate pipeline"
    )
    parser.add_argument(
        "--backend",
        choices=["aws", "gcs"],
        help="Storage backend to configure (aws or gcs)",
    )
    parser.add_argument(
        "--bucket-name",
        help="Google Cloud Storage bucket name (required for GCS backend)",
    )
    parser.add_argument(
        "--credentials", help="Path to Google Cloud service account JSON file"
    )
    parser.add_argument(
        "--status",
        action="store_true",
        help="Show current storage configuration status",
    )
    parser.add_argument(
        "--setup-help",
        choices=["aws", "gcs"],
        help="Show setup instructions for the specified backend",
    )
    parser.add_argument(
        "--install-gcs",
        action="store_true",
        help="Install Google Cloud Storage dependencies",
    )

    args = parser.parse_args()

    if args.setup_help:
        if args.setup_help == "aws":
            setup_aws()
        elif args.setup_help == "gcs":
            setup_gcs()
        return

    if args.install_gcs:
        install_gcs_dependencies()
        return

    if args.status:
        try:
            show_status()
        except Exception as e:
            print(f"Error checking status: {e}")
            print("Run with --setup-help to see configuration instructions")
        return

    if args.backend:
        if args.backend == "gcs" and not args.bucket_name:
            print("Error: --bucket-name is required when configuring GCS backend")
            print(
                "Example: python configure_storage.py --backend gcs --bucket-name my-bucket"
            )
            return

        try:
            create_env_file(args.backend, args.bucket_name, args.credentials)
            print(f"✓ Configured storage backend: {args.backend.upper()}")

            if args.backend == "gcs":
                print()
                print("Next steps for Google Cloud Storage:")
                print("1. Ensure you have authentication set up")
                print("2. Test connectivity: python configure_storage.py --status")
                print(
                    "3. If you need help: python configure_storage.py --setup-help gcs"
                )

        except Exception as e:
            print(f"Error configuring storage: {e}")
    else:
        print("Use --help for usage information")
        print("Examples:")
        print("  python configure_storage.py --status")
        print("  python configure_storage.py --backend aws")
        print("  python configure_storage.py --backend gcs --bucket-name my-bucket")
        print("  python configure_storage.py --setup-help gcs")


if __name__ == "__main__":
    main()
